<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="Flaneur.Launching.MSBuild.LaunchTask" AssemblyFile="$(FlaneurAssemblyPath)" />
	<UsingTask TaskName="Flaneur.Launching.MSBuild.SetEnvTask" AssemblyFile="$(FlaneurAssemblyPath)" />
	<UsingTask TaskName="Flaneur.Launching.MSBuild.DeepestCommonDirectoryTask" AssemblyFile="$(FlaneurAssemblyPath)" />

	<PropertyGroup>
		<CollectBundleResourcesDependsOn>
			$(CollectBundleResourcesDependsOn);
			RunLaunchBundle;
			IncludeBundleAssets
		</CollectBundleResourcesDependsOn>
	</PropertyGroup>

	<PropertyGroup>
		<BuildDependsOn>
			SetLaunchUrl;
			$(BuildDependsOn);
			RunLaunchHttp
		</BuildDependsOn>
	</PropertyGroup>
	
	<PropertyGroup>
		<!--
			Run via Visual Studio, IsImplicitlyTriggeredBuild is true
			https://github.com/dotnet/roslyn/blob/5100eeedfe43c45b53fc298d6341d4d52e0d735a/src/Compilers/Core/MSBuildTask/Microsoft.Managed.Core.targets#L85-L96
		-->
		<_IsHttpLaunch Condition="'$(_IsHttpLaunch)' == '' and '$(IsImplicitlyTriggeredBuild)' == true">true</_IsHttpLaunch>

		<!--
			Run via `dotnet build -t:Run -f net7.0-ios -p:_DeviceName=:v2:udid=MY_SPECIFIC_UDID`, _MlaunchWaitForExit is set
			https://github.com/xamarin/xamarin-macios/blob/43ae6c749407e47fdf5fa07295119b87f7328ea6/dotnet/targets/Xamarin.Shared.Sdk.targets#L1860-L1925
		-->
		<_IsHttpLaunch Condition="'$(_IsHttpLaunch)' == '' and '$(_MlaunchWaitForExit)' != ''">true</_IsHttpLaunch>

		<FlaneurWorkingDirectory>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), $(FlaneurWorkingDirectory)))</FlaneurWorkingDirectory>
		<!--
			TODO: Allow multiple subdirs for bundle.
			Relative links don't seem to work in WKWebView with custom protocols so `bundle://example/wapp/index.html` that references `./assets/index.js`
			will result in a request to `bundle://example/assets/index.js` instead of `bundle://example/wapp/assets/index.js`.
		-->
		<!--<FlaneurBundleDirectory>wapp</FlaneurBundleDirectory>-->
		
		<FlaneurUseHttp Condition="$(FlaneurUseHttp) != false and $(_IsHttpLaunch) == true">true</FlaneurUseHttp>
	</PropertyGroup>

	<!--
		Allow specifying bundle assets in project.
			
		I tried making this easier to use by prepending the FlaneurWorkingDirectory and generating a link
		but I couldn't get it to work with wildcards which is probably a common way to specify assets.
			
		I couldn't find a workaround nor documentation aside from being mentioned in this answer:
		> Further, MSBuild can't compose a path with a wildcard inside the Include attribute and evaluate
		> it at the same time, so you need a trick to first compose the full path separately, then feed
		> it into the Include attribute. 
		https://stackoverflow.com/a/5188096/1259408
	-->
	<ItemGroup Condition="$(TargetFramework.Contains('-ios')) == true">
		<BundleResource Include="@(FlaneurBundleAsset)" />
	</ItemGroup>

	<Target Name="IncludeBundleAssets" Condition="'$(FlaneurUseHttp)' != 'true'">
		<!-- TODO: Allow bundle assets set from property FlaneurBundleAssets for CLI usage -->
		
		<Exec
			Condition="'$(FlaneurBundleAssetsCommand)' != ''"
			Command="$(FlaneurBundleAssetsCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			EchoOff="true"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurBundleAssets" />
		</Exec>

		<ItemGroup>
			<!-- Expand multi-value property into items -->
			<_FlaneurBundleExpandedAsset Include="$(FlaneurBundleAssets)" />
			<!-- Resolve paths based on working directory -->
			<_FlaneurBundleResolvedAsset Include="@(_FlaneurBundleExpandedAsset -> '$(FlaneurWorkingDirectory)/%(Identity)')" />
		</ItemGroup>
		
		<DeepestCommonDirectoryTask Items="@(_FlaneurBundleResolvedAsset)">
			<Output TaskParameter="Directory" PropertyName="_FlaneurBundleCommonDirectory" />
		</DeepestCommonDirectoryTask>
		
		<ItemGroup>
			<FlaneurBundleAsset Include="@(_FlaneurBundleResolvedAsset)">
				<Link Condition="'$(_FlaneurBundleCommonDirectory)' != ''">$([System.IO.Path]::Combine($(FlaneurBundleDirectory), $([MSBuild]::MakeRelative('$(_FlaneurBundleCommonDirectory)', '%(Identity)'))))</Link>
				<Link Condition="'$(_FlaneurBundleCommonDirectory)' == ''">$([System.IO.Path]::Combine($(FlaneurBundleDirectory), '%(Identity)'))</Link>
			</FlaneurBundleAsset>
		</ItemGroup>

		<Message Importance="high" Text="Flaneur is bundling @(FlaneurBundleAsset->Count()) assets" />

		<ItemGroup Condition="$(TargetFramework.Contains('-ios')) == true">
			<BundleResource Include="@(FlaneurBundleAsset)" KeepDuplicates="false" />
		</ItemGroup>

	</Target>

	<Target Name="SetLaunchUrl">
		<Exec
			Condition="'$(FlaneurHttpUrlCommand)' != '' and '$(FlaneurUseHttp)' == 'true'"
			Command="$(FlaneurHttpUrlCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurHttpUrl" />
		</Exec>

		<Exec
			Condition="'$(FlaneurBundleUrlCommand)' != '' and '$(FlaneurUseHttp)' != 'true'"
			Command="$(FlaneurBundleUrlCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurBundleUrl" />
		</Exec>

		<PropertyGroup>
			<FlaneurHttpUrl Condition="$(FlaneurHttpUrl) == ''">http://localhost</FlaneurHttpUrl>
			<FlaneurBundleUrl Condition="$(FlaneurBundleUrl) == '' and $(FlaneurBundleDirectory) == ''">bundle://main</FlaneurBundleUrl>
			<FlaneurBundleUrl Condition="$(FlaneurBundleUrl) == '' and $(FlaneurBundleDirectory) != ''">bundle://main/$(FlaneurBundleDirectory)</FlaneurBundleUrl>
			<FlaneurUrl Condition="$(FlaneurUrl) == '' and $(FlaneurUseHttp) == 'true'">$(FlaneurHttpUrl)</FlaneurUrl>
			<FlaneurUrl Condition="$(FlaneurUrl) == '' and $(FlaneurUseHttp) != 'true'">$(FlaneurBundleUrl)</FlaneurUrl>
		</PropertyGroup>
		<Message Importance="high" Text="Flaneur will use the URL '$(FlaneurUrl)'" />

		<SetEnvTask Condition="'$(FlaneurUrl)' != ''" Variable="FLANEUR_URL" Value="$(FlaneurUrl)" />
	</Target>

	<Target Name="RunLaunchHttp" Condition="'$(FlaneurUseHttp)' == 'true' and '$(FlaneurHttpCommand)' != ''">
		<Message
			Importance="high"
			Text="Flaneur is running HTTP command '$(FlaneurHttpCommand)' in a new window" />
		<LaunchTask
			Command="$(FlaneurHttpCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />
	</Target>

	<Target Name="RunLaunchBundle" Condition="'$(FlaneurUseHttp)' != 'true' and '$(FlaneurBundleCommand)' != ''">
		<Message
			Importance="high"
			Text="Flaneur is running bundle command '$(FlaneurBundleCommand)'" />
		<Exec
			Command="$(FlaneurBundleCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />

	</Target>

	<Target Name="RunFlaneurRestore" Condition="'$(FlaneurUseHttp)' != 'true' and '$(FlaneurRestoreCommand)' != ''" BeforeTargets="CollectPackageReferences">
		<Message
			Importance="high"
			Text="Flaneur is running restore command '$(FlaneurRestoreCommand)'" />
		<Exec
			Command="$(FlaneurRestoreCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />

	</Target>

</Project>