<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="Flaneur.Launching.MSBuild.LaunchTask" AssemblyFile="$(FlaneurAssemblyPath)" />
	<UsingTask TaskName="Flaneur.Launching.MSBuild.SetEnvTask" AssemblyFile="$(FlaneurAssemblyPath)" />
	<UsingTask TaskName="Flaneur.Launching.MSBuild.DeepestCommonDirectoryTask" AssemblyFile="$(FlaneurAssemblyPath)" />

	<PropertyGroup>
		<CollectBundleResourcesDependsOn>
      $(CollectBundleResourcesDependsOn);
      _FlaneurBuildBundle;
      _FlaneurIncludeBundle
    </CollectBundleResourcesDependsOn>
	</PropertyGroup>

	<PropertyGroup>
		<BuildDependsOn>
			_FlaneurSetUrl;
			$(BuildDependsOn);
			_FlaneurRunHttp
		</BuildDependsOn>
	</PropertyGroup>

  <PropertyGroup>
    <FlaneurWorkingDirectory>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), $(FlaneurWorkingDirectory)))</FlaneurWorkingDirectory>
  </PropertyGroup>

  <!-- Attempt to detect F5/debug run -->
	<PropertyGroup>
		<!--
			Run via Visual Studio, IsImplicitlyTriggeredBuild is true
			https://github.com/dotnet/roslyn/blob/5100eeedfe43c45b53fc298d6341d4d52e0d735a/src/Compilers/Core/MSBuildTask/Microsoft.Managed.Core.targets#L85-L96
		-->
		<_IsHttpLaunch Condition="'$(_IsHttpLaunch)' == '' and '$(IsImplicitlyTriggeredBuild)' == true">true</_IsHttpLaunch>

		<!--
			Run via `dotnet build -t:Run -f net7.0-ios -p:_DeviceName=:v2:udid=MY_SPECIFIC_UDID`, _MlaunchWaitForExit is set
			https://github.com/xamarin/xamarin-macios/blob/43ae6c749407e47fdf5fa07295119b87f7328ea6/dotnet/targets/Xamarin.Shared.Sdk.targets#L1860-L1925
		-->
		<_IsHttpLaunch Condition="'$(_IsHttpLaunch)' == '' and '$(_MlaunchWaitForExit)' != ''">true</_IsHttpLaunch>
	</PropertyGroup>
  
  <Choose>
    <When Condition="$(FlaneurMode) == 'HTTP' or $(FlaneurHttp) != '' or ($(FlaneurMode) == '' and $(_IsHttpLaunch) == true and $(FlaneurBundle) == '')">
      <PropertyGroup>
        <FlaneurMode>HTTP</FlaneurMode>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <FlaneurMode>Bundle</FlaneurMode>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--
		Allow specifying bundle assets in project.

		I tried making this easier to use by prepending the FlaneurWorkingDirectory and generating a link
		but I couldn't get it to work with wildcards which is probably a common way to specify assets.

		I couldn't find a workaround nor documentation aside from being mentioned in this answer:
		> Further, MSBuild can't compose a path with a wildcard inside the Include attribute and evaluate
		> it at the same time, so you need a trick to first compose the full path separately, then feed
		> it into the Include attribute.
		https://stackoverflow.com/a/5188096/1259408
	-->
  <ItemGroup Condition="$(TargetFramework.Contains('-ios')) == true">
    <BundleResource Include="@(FlaneurBundleFile)" />
  </ItemGroup>

  <Target Name="_FlaneurRestore" Condition="'$(FlaneurRestoreCommand)' != ''" BeforeTargets="CollectPackageReferences">
    <Message
			Importance="high"
			Text="Flaneur is running restore command '$(FlaneurRestoreCommand)'" />
    <Exec
			Command="$(FlaneurRestoreCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />
  </Target>

  <Target Name="_FlaneurBuildBundle" Condition="$(FlaneurMode) == 'Bundle' and $(FlaneurBundleBuildCommand) != ''">
    <Message
      Importance="high"
      Text="Flaneur is running bundle build command '$(FlaneurBundleBuildCommand)' in $(FlaneurWorkingDirectory)" />
    <Exec
      Command="$(FlaneurBundleBuildCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />
  </Target>
  
  <Target Name="_FlaneurIncludeBundle" Condition="$(FlaneurMode) == 'Bundle'">

		<Exec
			Condition="'$(FlaneurBundlePrintFilesCommand)' != ''"
			Command="$(FlaneurBundlePrintFilesCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			EchoOff="true"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurBundleFiles" />
		</Exec>

		<ItemGroup>
			<!-- Expand multi-value property into items -->
			<_FlaneurBundleExpandedFile Include="$(FlaneurBundleFiles)" />
			 <!--Resolve paths based on working directory if necessary --> 
			<_FlaneurBundleResolvedFile
        Condition="$([System.IO.Path]::IsPathFullyQualified(%(RelativeDir))) == 'true'"
        Include="@(_FlaneurBundleExpandedFile -> '%(Identity)')" />
      <_FlaneurBundleResolvedFile
        Condition="$([System.IO.Path]::IsPathFullyQualified(%(RelativeDir))) == 'false'"
        Include="@(_FlaneurBundleExpandedFile -> '$(FlaneurWorkingDirectory)/%(Identity)')" />
      <_FlaneurBundleResolvedFile
        Condition="'$(FlaneurBundleDirectory)' != '' and $([System.IO.Path]::IsPathFullyQualified($(FlaneurBundleDirectory))) == 'true'"
        Include="$(FlaneurBundleDirectory)/**/*" />
      <_FlaneurBundleResolvedFile
        Condition="'$(FlaneurBundleDirectory)' != '' and $([System.IO.Path]::IsPathFullyQualified($(FlaneurBundleDirectory))) == 'false'"
        Include="$(FlaneurWorkingDirectory)/$(FlaneurBundleDirectory)/**/*" />
		</ItemGroup>

		<DeepestCommonDirectoryTask Items="@(_FlaneurBundleResolvedFile)">
			<Output TaskParameter="Directory" PropertyName="_FlaneurBundleCommonDirectory" />
		</DeepestCommonDirectoryTask>

		<ItemGroup>
			<FlaneurBundleFile Include="@(_FlaneurBundleResolvedFile)">
				<Link Condition="'$(_FlaneurBundleCommonDirectory)' != ''">$([MSBuild]::MakeRelative('$(_FlaneurBundleCommonDirectory)', '%(Identity)'))</Link>
				<Link Condition="'$(_FlaneurBundleCommonDirectory)' == ''">%(Identity)</Link>
			</FlaneurBundleFile>
		</ItemGroup>

    <Message Importance="high" Text="Flaneur is bundling @(FlaneurBundleFile->Count()) files" />

		<ItemGroup Condition="$(TargetFramework.Contains('-ios')) == true">
			<BundleResource Include="@(FlaneurBundleFile)" KeepDuplicates="false" />
		</ItemGroup>

	</Target>

	<Target Name="_FlaneurSetUrl">
		<Exec
			Condition="'$(FlaneurHttpPrintUrlCommand)' != '' and '$(FlaneurMode)' == 'HTTP'"
			Command="$(FlaneurHttpPrintUrlCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurHttpUrl" />
		</Exec>

		<Exec
			Condition="'$(FlaneurBundlePrintUrlCommand)' != '' and '$(FlaneurMode)' == 'Bundle'"
			Command="$(FlaneurBundlePrintUrlCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)"
			ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="FlaneurBundleUrl" />
		</Exec>

		<PropertyGroup>
			<FlaneurHttpUrl Condition="$(FlaneurHttpUrl) == ''">http://localhost</FlaneurHttpUrl>
			<FlaneurBundleUrl Condition="$(FlaneurBundleUrl) == ''">bundle://main</FlaneurBundleUrl>
			<FlaneurUrl Condition="$(FlaneurUrl) == '' and $(FlaneurMode) == 'HTTP'">$(FlaneurHttpUrl)</FlaneurUrl>
			<FlaneurUrl Condition="$(FlaneurUrl) == '' and $(FlaneurMode) == 'Bundle'">$(FlaneurBundleUrl)</FlaneurUrl>
		</PropertyGroup>
		<Message Importance="high" Text="Flaneur will use the URL '$(FlaneurUrl)'" />

		<SetEnvTask Condition="'$(FlaneurUrl)' != ''" Variable="FLANEUR_URL" Value="$(FlaneurUrl)" />
	</Target>

	<Target Name="_FlaneurRunHttp" Condition="'$(FlaneurMode)' == 'HTTP' and '$(FlaneurHttpRunCommand)' != ''">
		<Message
			Importance="high"
			Text="Flaneur is running HTTP command '$(FlaneurHttpRunCommand)' in a new window" />
		<LaunchTask
			Command="$(FlaneurHttpRunCommand)"
			WorkingDirectory="$(FlaneurWorkingDirectory)" />
	</Target>

</Project>
